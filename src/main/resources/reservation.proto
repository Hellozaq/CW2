syntax = "proto3";

option java_multiple_files = true;
option java_package = "com.concert";
option java_outer_classname = "ReservationProto";

service ReservationService {
  rpc AddShow(AddShowRequest) returns (AddShowResponse);
  rpc ReserveTicket(ReserveTicketRequest) returns (ReserveTicketResponse);
  rpc GetShowStatus(ShowStatusRequest) returns (ShowStatusResponse);
  rpc SyncUpdate(UpdateRequest) returns (UpdateResponse);
  rpc syncAll(SyncRequest) returns (SyncResponse);
  rpc Prepare(PrepareRequest) returns (PrepareResponse);
  rpc Commit(CommitRequest) returns (Ack);
  rpc Abort(AbortRequest) returns (Ack);
}

message AddShowRequest {
  string showName = 1;
  int32 concertSeats = 2;
  int32 afterPartyTickets = 3;
}

message AddShowResponse {
  string status = 1;
}

message ReserveTicketRequest {
  string showName = 1;
  bool includeAfterParty = 2;
}

message ReserveTicketResponse {
  string status = 1;
}

message ShowStatusRequest {
  string showName = 1;
}

message ShowStatusResponse {
  int32 concertSeats = 1;
  int32 afterPartyTickets = 2;
}

message UpdateRequest {
  string showName = 1;
  int32 concertSeats = 2;
  int32 afterPartyTickets = 3;
  string source = 4; // "leader" for message context
}

message UpdateResponse {
  string status = 1;
}
message SyncRequest {
  string requestor = 1;
}

message ShowData {
  string showName = 1;
  int32 concertSeats = 2;
  int32 afterPartyTickets = 3;
}

message SyncResponse {
  repeated ShowData shows = 1;
}
message PrepareRequest {
  string transactionId = 1;
  string showName = 2;
  int32 ticketCount = 3;
  bool needAfterParty = 4;
}

message PrepareResponse {
  bool voteCommit = 1;
}

// ==== Phase 2: Commit/Abort ====
message CommitRequest {
  string transactionId = 1;
  string showName = 2;
}

message AbortRequest {
  string transactionId = 1;
  string showName = 2;
}

message Ack {
  string status = 1;
}